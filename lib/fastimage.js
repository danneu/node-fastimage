// Generated by CoffeeScript 1.3.1
var FastImage, http, log, parse;

http = require("http");

log = console.log;

parse = require("url").parse;

FastImage = (function() {

  FastImage.name = 'FastImage';

  function FastImage(uri, callback) {
    this.uri = uri;
    this.callback = callback;
    this.fetchPacket(this.uri);
  }

  FastImage.prototype.fetchPacket = function(uri) {
    var host, path, req, _ref,
      _this = this;
    _ref = parse(uri), host = _ref.host, path = _ref.path;
    return req = http.get({
      host: host,
      path: path,
      port: 80
    }, function(res) {
      return res.on("data", function(buffer) {
        _this.parseSize(buffer);
        return req.abort();
      });
    });
  };

  FastImage.prototype.parseSize = function(buffer) {
    this.type = this.parseType(buffer);
    switch (this.type) {
      case "gif":
        return this.parseSizeForGif(buffer);
      case "bmp":
        return this.parseSizeForBmp(buffer);
      case "png":
        return this.parseSizeForPng(buffer);
      case "jpg":
        return this.parseSizeForJpg(buffer);
    }
  };

  FastImage.prototype.parseType = function(buffer) {
    switch (buffer.slice(0, 2).toString("hex")) {
      case "4749":
        return "gif";
      case "424d":
        return "bmp";
      case "8950":
        return "png";
      case "ffd8":
        return "jpg";
      default:
        throw "Unrecognized type";
    }
  };

  FastImage.prototype.parseSizeForGif = function(buffer) {
    var height, width;
    width = buffer.readInt16LE(6);
    height = buffer.readInt16LE(8);
    return this.callback(null, {
      type: this.type,
      width: width,
      height: height
    });
  };

  FastImage.prototype.parseSizeForBmp = function(buffer) {
    var buf, height, width;
    buf = buffer.slice(14, 28);
    if (buf[0] === 40) {
      width = buf.readUInt32LE(4);
      height = buf.readUInt32LE(8);
      return this.callback(null, {
        type: this.type,
        width: width,
        height: height
      });
    } else {
      return this.callback("TODO: Unimplemented BMP case", null);
    }
  };

  FastImage.prototype.parseSizeForPng = function(buffer) {
    var height, width;
    width = buffer.readUInt32BE(16);
    height = buffer.readUInt32BE(20);
    return this.callback(null, {
      type: this.type,
      width: width,
      height: height
    });
  };

  FastImage.prototype.parseSizeForJpg = function(buffer) {
    var byte, height, state, width, _i, _len;
    state = 0;
    width = null;
    height = null;
    for (_i = 0, _len = buffer.length; _i < _len; _i++) {
      byte = buffer[_i];
      state = (function() {
        switch (state) {
          case 0:
            if (byte === 255) {
              return 1;
            } else {
              return 0;
            }
            break;
          case 1:
            if (byte >= 192 && byte <= 195) {
              return 2;
            } else {
              return 0;
            }
            break;
          case 2:
            return 3;
          case 3:
            return 4;
          case 4:
            return 5;
          case 5:
            height = byte * 256;
            return 6;
          case 6:
            height += byte;
            return 7;
          case 7:
            width = byte * 256;
            return 8;
          case 8:
            width += byte;
            break;
        }
      })();
    }
    return this.callback(null, {
      type: this.type,
      width: width,
      height: height
    });
  };

  return FastImage;

})();

module.exports = FastImage;
